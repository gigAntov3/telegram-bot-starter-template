import asyncio
import logging

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base

from .users import UserManager, BaseUsers


logging.getLogger('sqlalchemy.engine').setLevel(logging.CRITICAL)


# –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π
class DatabaseManager(UserManager):
    def __init__(self, db_url: str = 'data/database.db'):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.engine = create_async_engine('sqlite+aiosqlite:///' + db_url, echo=False)
        self.async_session = sessionmaker(
            self.engine, expire_on_commit=False, class_=AsyncSession
        )
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ–±—è –≤ –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        UserManager.__init__(self, self)

    def get_session(self) -> AsyncSession:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        return self.async_session()

    async def init_db(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        async with self.engine.begin() as conn:
            await conn.run_sync(BaseUsers.metadata.create_all)
            
        print("üóÇÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n")

if __name__ == "__main__":
    async def main():
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_manager = DatabaseManager()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db_manager.init_db()

    asyncio.run(main())